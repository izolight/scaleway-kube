---
- name: generate privatekey for user {{ USER }}
  openssl_privatekey:
    path: "/home/{{ USER }}/.kube/{{ USER }}.key"

- name: create csr for {{ USER }}
  openssl_csr:
    path: "/home/{{ USER }}/.kube/{{ USER }}.csr"
    privatekey_path: "/home/{{ USER }}/.kube/{{ USER }}.key"
    common_name: "{{ USER }}"

- name: read in the csr
  slurp:
    src: "/home/{{ USER }}/.kube/{{ USER }}.csr"
  register: CSR

- name: submit csr to cluster
  k8s:
    definition: "{{ lookup('template', 'csr.yaml') }}"

- name: approve the csr
  shell: "kubectl certificate approve user-request-{{ USER }}"

- name: get certificate
  shell: "kubectl get csr user-request-{{ USER }} -o jsonpath='{.status.certificate}' | base64 -d"
  register: CERT

- name: create cert file
  copy:
    content: "{{ CERT.stdout }}"
    dest: "/home/{{ USER }}/.kube/{{ USER }}.crt"

- name: get ca
  shell: kubectl config view --minify=true --flatten -o json | jq '.clusters[0].cluster."certificate-authority-data"' -r
  register: CA

- name: read key
  slurp:
    src: "/home/{{ USER }}/.kube/{{ USER }}.key"
  register: KEY

- name: create kubeconfig file
  template:
    src: kubeconfig.yaml
    dest: "/home/{{ USER }}/.kube/config-{{ USER }}"

- name: add clusterwide view for {{ USER }}
  k8s:
    definition: "{{ lookup('template', 'clusterrolebinding.yaml') }}"
  tags: cluster-access-permissions

- name: add edit on default for {{ USER }}
  k8s:
    definition: "{{ lookup('template', 'rolebinding.yaml') }}"
  tags: cluster-access-permissions
